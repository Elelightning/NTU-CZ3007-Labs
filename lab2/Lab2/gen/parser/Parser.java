package parser;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class Parser extends beaver.Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short IMPORT = 2;
		static public final short LBRACKET = 3;
		static public final short SEMICOLON = 4;
		static public final short RBRACKET = 5;
		static public final short VOID = 6;
		static public final short RPAREN = 7;
		static public final short RCURLY = 8;
		static public final short LCURLY = 9;
		static public final short MODULE = 10;
		static public final short INT = 11;
		static public final short BOOLEAN = 12;
		static public final short PUBLIC = 13;
		static public final short STRING_LITERAL = 14;
		static public final short TYPE = 15;
		static public final short LPAREN = 16;
		static public final short EQL = 17;
		static public final short IF = 18;
		static public final short ELSE = 19;
		static public final short WHILE = 20;
		static public final short RETURN = 21;
		static public final short BREAK = 22;
		static public final short TRUE = 23;
		static public final short FALSE = 24;
		static public final short INT_LITERAL = 25;
		static public final short PLUS = 26;
		static public final short MINUS = 27;
		static public final short TIMES = 28;
		static public final short DIV = 29;
		static public final short MOD = 30;
		static public final short EQEQ = 31;
		static public final short NEQ = 32;
		static public final short LEQ = 33;
		static public final short GEQ = 34;
		static public final short LT = 35;
		static public final short GT = 36;
		static public final short COMMA = 37;
	}
	static public class AltGoals {
		static public final short Dummy = 38;
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9pDbETFar4KXvz2XLAafUofbBrNAOg2oXxA44dKcFYt#6yQFvgu1#xjzUbhCTNmrUXDdZl" +
		"FkVTtJjxp0hUPOPXDyeopnoHNM62AQNBiiCqoQroWZ8dmYZEiXC1kU10EmqlMsQAS4yJ3To" +
		"gf846IarIHeePwgccaZGvEKKUM1iOuIvfkQkadGoy3z8M7D352CuEqC4ehLncYFNmBZvXbZ" +
		"axESuxJNAIBULPPeeSDBd6PnV2LVU1Q#E8zIMBUCE8DOwg86q51VRLQSaQMDgg45hLgHMLv" +
		"vp7dvUf8Ck5UXRPrAcnITOrUCPMNgRjBjIdjqcPdI9MLgeohCc7CLVgrQTdklHskElN8g1M" +
		"jOfBrrYhrneoqO1#dppuZAIrZPZ7k20Ttx4887noQf46wf5dQ9IFrKYkDafQEw6ry4rKIlP" +
		"gLGUcM8UcHNkcJVad9G1G$HeDHOiOmPvWrp15HBgPaMdAIbqcPaNbPaBc2NjkI96Mzi2x55" +
		"fCDYSkYBCkAhCbcYTsEhCgMx1RtwcIxE6#HlUAyLVR$VAjuTbrkoWsvLSpd$U9uU9pF$uGj" +
		"eSwx1OuxT$zUYMto7#Wxu2#sy5e#Xq$XOrG3lv#z3#z#pTz6$PEeVnhrZyEBy3my2szAN5g" +
		"Z#ivRM#DMuB3Zg1KyuZZc$X6JrkQKt#UqDWEk2vKn6Fr5Vf8hOKR$8mgLDM5DpVu0gXEWNG" +
		"==");

	static final Action RETURN2 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 2];
		}
	};

	static final Action RETURN6 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 6];
		}
	};

	static final Action RETURN3 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 3];
		}
	};

	static final Action RETURN9 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 9];
		}
	};

	static final Action RETURN4 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 4];
		}
	};

	static final Action RETURN37 = new Action() {
		public Symbol reduce(Symbol[] _symbols, int offset) {
			return _symbols[offset + 37];
		}
	};

	// turn off automated error recovery
	@Override
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Exception {
		super.recoverFromError(new Symbol(0), in);
	}

	private final Action[] actions;

	public Parser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			Action.RETURN,	// [0] $goal = Module
			RETURN2,	// [1] $goal = $Dummy Dummy; returns 'Dummy' although none is marked
			RETURN6,	// [2] Module = MODULE ID LCURLY Imports Declarations RCURLY; returns 'RCURLY' although none is marked
			RETURN2,	// [3] Imports = Imports Import; returns 'Import' although none is marked
			RETURN3,	// [4] Import = IMPORT ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN2,	// [5] Declarations = Declarations Declaration; returns 'Declaration' although none is marked
			Action.RETURN,	// [6] Declaration = Function
			Action.RETURN,	// [7] Declaration = Field
			Action.RETURN,	// [8] Declaration = Type
			RETURN9,	// [9] Function = Accessibility TypeName ID LPAREN ParameterList RPAREN LCURLY VOID RCURLY; returns 'RCURLY' although none is marked
			RETURN4,	// [10] Field = Accessibility TypeName ID SEMICOLON; returns 'SEMICOLON' although none is marked
			RETURN6,	// [11] Type = Accessibility TYPE ID EQL STRING_LITERAL SEMICOLON; returns 'SEMICOLON' although none is marked
			Action.RETURN,	// [12] Accessibility = PUBLIC
			Action.NONE,  	// [13] Accessibility = 
			Action.RETURN,	// [14] TypeName = PrimitiveType
			Action.RETURN,	// [15] TypeName = ArrayType
			Action.RETURN,	// [16] TypeName = ID
			Action.RETURN,	// [17] PrimitiveType = VOID
			Action.RETURN,	// [18] PrimitiveType = BOOLEAN
			Action.RETURN,	// [19] PrimitiveType = INT
			RETURN3,	// [20] ArrayType = ArrayType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [21] ArrayType = PrimitiveType LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			RETURN3,	// [22] ArrayType = ID LBRACKET RBRACKET; returns 'RBRACKET' although none is marked
			Action.NONE,  	// [23] ParameterList = 
			RETURN37	// [24] Dummy = MODULE INT VOID IF ELSE WHILE RETURN BREAK BOOLEAN PUBLIC TRUE FALSE INT_LITERAL STRING_LITERAL ID TYPE IMPORT PLUS MINUS TIMES DIV MOD EQEQ NEQ LEQ GEQ LT GT LBRACKET RPAREN COMMA RCURLY LCURLY SEMICOLON RBRACKET LPAREN EQL; returns 'EQL' although none is marked
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
